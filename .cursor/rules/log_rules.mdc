# Qt/DTK 日志规范

## 日志的重要性

- **故障排除和调试**：帮助诊断问题，当系统出现错误或崩溃时提供详细信息
- **安全性和合规性**：跟踪系统中的事件，帮助确定安全漏洞并提高合规性
- **分析和数据挖掘**：用于分析用户行为和偏好，帮助做出更明智的决策

## 日志级别及使用准则

Qt 提供了一个全面的日志系统，具有不同的严重性级别。正确使用日志级别有助于调试和排除应用程序故障。

### qDebug() / qCDebug()

主要用于开发和调试过程中的详细信息，生产环境通常不显示。

**使用场景：**
- 函数内部的处理步骤
- 变量值和状态信息
- 详细的程序流程

### qInfo() / qCInfo()

用于记录重要但非异常的系统事件。

**使用场景：**
- 成功完成的重要操作
- 配置变更
- 用户交互操作
- 关键模块初始化信息

### qWarning() / qCWarning()

用于潜在问题的警告，但程序仍能继续运行。

**使用场景：**
- 资源不可用但有替代方案
- 非关键操作失败
- 参数或状态异常但可以恢复
- 可能导致问题的情况

### qCritical() / qCCritical()

用于严重错误，功能可能无法正常工作。

**使用场景：**
- 资源完全不可用
- 关键操作失败
- 需要用户干预的错误
- 组件或功能无法完成其任务

### qFatal()

用于导致应用程序终止的不可恢复错误。

> **注意**：deepin 环境中默认只打印 WARNING 级别以上的日志，不可为了方便将不必要的日志打印成 INFO 或 WARNING 级别！

## 日志记录内容指南

### 推荐记录的日志内容

1. 程序启动或初始化时的重要参数
2. 程序运行过程中的所有错误
3. 程序运行过程中的所有警告
4. 持久化数据修改时的修改前后值
5. 程序各主要模块之间的请求和响应
6. 外部数据请求和响应
7. 重要的状态变化
8. 长期执行任务的执行进度

### 不推荐记录的日志内容

1. 函数入口信息（除非该函数入口表示重要事件的开始，或者将该信息记入 DEBUG 级别日志）
2. 文件内容或一大段消息内容（若需要记录，可截取重要信息）
3. "良性"错误（由错误处理流程正确解决的情况）
4. 频繁重复的错误（出现高频错误或警告应排查程序逻辑问题）

### 日志内容最佳实践

1. **包含上下文信息**：单独一条日志可能无法准确定位故障，需要联系上下文
2. **记录关键流程节点**：便于测试和维护人员识别
3. **记录流程异常问题点**：关键流程中的异常信息使用 WARNING 以上级别打印
4. **避免敏感信息**：防止安全漏洞和隐私泄露
5. **避免重复日志**：
   - 若返回错误值则不应该进行日志打印
   - 避免在高频次逻辑里面打印日志
6. **不确定不打印原则**：不确定是否要打印日志时，不应打印
7. 所有的日志应该使用**英文**输出

## Qt/DTK 日志实现方式

### 日志分类方式

在 Qt 中，日志分级有两种方式：
* 使用 `qDebug()`, `qInfo()`, `qWarning()`, `qCritical()`, `qFatal()`
* 使用 `qCDebug()`, `qCInfo()`, `qCWarning()`, `qCCritical()`（推荐）

第二种方式可以很方便地对日志进行分类，特别适合中大型项目，支持按分类调整日志等级。

### 使用示例


// 在 .h 文件中声明
Q_DECLARE_LOGGING_CATEGORY(moduleLog)

// 在 .cpp 文件中定义
Q_LOGGING_CATEGORY(moduleLog, "app.module.name")

// 使用方式
qCDebug(moduleLog) << "初始化模块";
qCInfo(moduleLog) << "模块加载完成";


### DTK 中 DLog 的使用

DTK 提供了多种输出方式，包括文件、终端、journal：


// 注册日志输出方式
DLogManager::registerJournalAppender();
#ifdef QT_DEBUG
    DLogManager::registerConsoleAppender();
#endif


**推荐使用 journal 方式的优势**：
* 支持日志过滤
* 支持日志压缩
* 支持自动清理
* 支持远程存储

## 日志格式规范

### 一般格式要求

1. **简明清晰**
   - 使用简单直接的语言
   - 包含足够的上下文以理解消息

2. **提供有价值的上下文**
   - 包括相关的对象ID、状态或值
   - 避免模糊的消息，如"发生错误"

3. **保持一致性**
   - 在所有日志中使用一致的术语
   - 保持一致的消息结构

4. **日志语言**
   - 所有日志消息都使用英文，保持一致性
   - 使用正确的语法，但优先考虑清晰度

### 错误日志结构

错误日志应包含：
1. 明确的错误描述
2. 错误代码（如果有）
3. 错误原因
4. 相关上下文数据

## 性能考虑

1. 使用 `qCDebug` 替代 `qDebug` 可以减少不必要的性能损耗
2. 在生产环境中避免过度日志记录
3. 使用 journal 进行日志管理会带来一定的性能损耗（比文件IO慢约3倍）
4. 对于性能要求不高的程序，可以使用 journal；对性能要求极高的程序，可以考虑其他方式

## 总结建议

1. 合理使用日志级别，确保日志信息清晰有用
2. 在中大型项目中使用 qCDebug 等分类方式管理日志
3. 推荐使用 DTK 的 DLog 和 journal 方式进行日志管理
4. 避免记录敏感信息和重复信息
5. 关注日志对程序性能的影响 
