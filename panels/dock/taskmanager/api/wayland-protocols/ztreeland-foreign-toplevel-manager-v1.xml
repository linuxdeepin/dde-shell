<?xml version="1.0" encoding="UTF-8"?>
<protocol name="ztreeland_foreign_toplevel_manager_v1">
    <copyright>
        Copyright Â© 2023 Uniontech

        Permission is hereby granted, free of charge, to any person obtaining a
        copy of this software and associated documentation files (the "Software"),
        to deal in the Software without restriction, including without limitation
        the rights to use, copy, modify, merge, publish, distribute, sublicense,
        and/or sell copies of the Software, and to permit persons to whom the
        Software is furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice (including the next
        paragraph) shall be included in all copies or substantial portions of the
        Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
        THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
        FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
        DEALINGS IN THE SOFTWARE.
    </copyright>
    <interface name="ztreeland_foreign_toplevel_manager_v1" version="1">
        <description summary="foreign toplevel manager">
        This interface allows a client to get toplevel some info.

        Warning! The protocol described in this file is currently in the testing
        phase. Backward compatible changes may be added together with the
        corresponding interface version bump. Backward incompatible changes can
        only be done by creating a new major version of the extension.
        </description>
        <event name="toplevel">
            <arg name="toplevel" type="new_id" interface="ztreeland_foreign_toplevel_handle_v1"/>
        </event>
        <request name="stop">
            <description summary="Stop sending events">
                Indicates the client no longer wishes to receive events for new toplevels.
            </description>
        </request>
    </interface>
    <interface name="ztreeland_foreign_toplevel_handle_v1" version="1">
        <description summary="An opened toplevel">
        A ztreeland_foreign_toplevel_handle_v1 object represents an opened toplevel window. Each app may have multiple opened toplevels.

        Warning! The protocol described in this file is currently in the testing
        phase. Backward compatible changes may be added together with the
        corresponding interface version bump. Backward incompatible changes can
        only be done by creating a new major version of the extension.
        </description>
        <enum name="error">
            <entry name="invalid_rectangle" value="1"
                summary="the provided rectangle is invalid"/>
        </enum>
        <event name="app_id">
            <description summary="Application identifier has been changed">
                This event will be sent as soon as the application identifier is changed.
            </description>
            <arg name="app_id" type="string" />
        </event>
        <event name="pid">
            <description summary="Process id of application owning the window has changed">
                This event will be sent when the compositor has set the process id this window belongs to. This should be set once before the initial_state is sent.
            </description>
            <arg name="pid" type="uint" />
        </event>
        <event name="done">
            <description summary="All information about the toplevel has been sent">
                This event is sent after all changes in the toplevel state have been sent.

                This allows changes to the ztreeland_foreign_toplevel_handle_v1 properties to be atomically applied. Other protocols which extend the ztreeland_foreign_toplevel_handle_v1 interface may use this event to also atomically apply any pending state.
            </description>
        </event>
        <event name="closed">
            <description summary="The toplevel has been closed">
                The server will emit no further events on the ztreeland_foreign_toplevel_handle_v1 after this event. Any requests received aside from the destroy request must be ignored. Upon receiving this event, the client should destroy the handle.

                Other protocols which extend the ztreeland_foreign_toplevel_handle_v1 interface must also ignore requests other than destructors.
            </description>
        </event>
        <event name="identifier">
            <description summary="A stable identifier for a toplevel">
                This identifier is used to check if two or more toplevel handles belong to the same toplevel.

                The identifier is useful for command line tools or privileged clients which may need to reference an exact toplevel across processes or instances of the ztreeland_foreign_toplevel_manager_v1 global.

                The compositor must only send this event when the handle is created.

                The identifier must be unique per toplevel and it's handles. Two different toplevels must not have the same identifier. The identifier is only valid as long as the toplevel is mapped. If the toplevel is unmapped the identifier must not be reused. An identifier must not be reused by the compositor to ensure there are no races when sharing identifiers between processes.

                An identifier is a string that contains up to 32 printable ASCII bytes. An identifier must not be an empty string. It is recommended that a compositor includes an opaque generation value in identifiers. How the generation value is used when generating the identifier is implementation dependent.
            </description>
            <arg name="identifier" type="string" />
        </event>

        <request name="destroy" type="destructor">
            <description summary="destroy the context object">
                Destroy the context object.
            </description>
        </request>
    </interface>
</protocol>
