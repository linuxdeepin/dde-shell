<?xml version="1.0" encoding="UTF-8"?>
<protocol name="plugin_manager_v1">
  <copyright>
      Copyright Â© 2024 Uniontech

      Permission is hereby granted, free of charge, to any person obtaining a
      copy of this software and associated documentation files (the "Software"),
      to deal in the Software without restriction, including without limitation
      the rights to use, copy, modify, merge, publish, distribute, sublicense,
      and/or sell copies of the Software, and to permit persons to whom the
      Software is furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice (including the next
      paragraph) shall be included in all copies or substantial portions of the
      Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
      THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
      DEALINGS IN THE SOFTWARE.
  </copyright>
  <interface name="plugin_manager_v1" version="1">
    <description summary="plugin manager">
      This interface allows a client to get server(dock) some info and create plugins to compositor.
    </description>
  
    <enum name="error">
      <entry name="role"            value="0" summary="given wl_surface has another role"/>
      <entry name="plugin_id"       value="1" summary="given wl_surface has another plugin_id"/>
    </enum>

    <event name="event_message">
      <description summary="a message sent from server (dock)">
        This event will emitted when server(dock) send message to plugin.
        Such as dock position/themeType/overflowStatus and other event defined in server(dock) interface
      </description>
      <arg name="msg"  type="string"/>
    </event>

    <request name="request_message">
      <description summary="a message sent from client">
        This event will emitted when client send message to server.
        Such as plugin status interface defined.
      </description>
      <arg name="msg"  type="string"/>
    </request>

    <request name="create_popup_at">
      <description summary="created popup window">
        This will created a popup window at (x, y) pos relative to ouput.
      </description>
      <arg name="x"             type="int"/>
      <arg name="y"             type="int"/>
      <arg name="type"          type="int"/>

      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="id"      type="new_id" interface="plugin_popup"/>
    </request>

    <request name="create_plugin">
      <arg name="plugin_id"     type="string"/>
      <arg name="item_key"      type="string"/>
      <arg name="plugin_flags"  type="int"/>
      <arg name="type"          type="int"/>

      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="id"      type="new_id" interface="plugin"/>
    </request>
  </interface>
  <interface name="plugin_popup" version="1">
    <event name="close"/>
  </interface>

  <interface name="plugin" version="1">
    <event name="close"/>
    <event name="pos">
      <arg name="x" type="int"/>
      <arg name="y" type="int"/>
    </event>
  </interface>
</protocol>
