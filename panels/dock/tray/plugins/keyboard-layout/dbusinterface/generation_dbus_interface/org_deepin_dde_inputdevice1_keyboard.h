/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c org_deepin_dde_InputDevice1_Keyboard -p /home/tsic/dde-shell/panels/dock/tray/plugins/keyboard-layout/dbusinterface/generation_dbus_interface/org_deepin_dde_inputdevice1_keyboard /home/tsic/dde-shell/panels/dock/tray/plugins/keyboard-layout/dbusinterface/xml/org.deepin.dde.InputDevice1.Keyboard.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_DEEPIN_DDE_INPUTDEVICE1_KEYBOARD_H
#define ORG_DEEPIN_DDE_INPUTDEVICE1_KEYBOARD_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DDBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>

#include "types/keyboardlayoutlist.h"

/*
 * Proxy class for interface org.deepin.dde.InputDevice1.Keyboard
 */
class __org_deepin_dde_InputDevice1_KeyboardPrivate;
class __org_deepin_dde_InputDevice1_Keyboard : public DTK_CORE_NAMESPACE::DDBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.dde.InputDevice1.Keyboard"; }

public:
    explicit __org_deepin_dde_InputDevice1_Keyboard(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__org_deepin_dde_InputDevice1_Keyboard();

    Q_PROPERTY(bool CapslockToggle READ capslockToggle WRITE setCapslockToggle NOTIFY CapslockToggleChanged)
    bool capslockToggle();
    void setCapslockToggle(bool value);

    Q_PROPERTY(QString CurrentLayout READ currentLayout WRITE setCurrentLayout NOTIFY CurrentLayoutChanged)
    QString currentLayout();
    void setCurrentLayout(const QString &value);

    Q_PROPERTY(int CursorBlink READ cursorBlink WRITE setCursorBlink NOTIFY CursorBlinkChanged)
    int cursorBlink();
    void setCursorBlink(int value);

    Q_PROPERTY(int LayoutScope READ layoutScope WRITE setLayoutScope NOTIFY LayoutScopeChanged)
    int layoutScope();
    void setLayoutScope(int value);

    Q_PROPERTY(uint RepeatDelay READ repeatDelay WRITE setRepeatDelay NOTIFY RepeatDelayChanged)
    uint repeatDelay();
    void setRepeatDelay(uint value);

    Q_PROPERTY(bool RepeatEnabled READ repeatEnabled WRITE setRepeatEnabled NOTIFY RepeatEnabledChanged)
    bool repeatEnabled();
    void setRepeatEnabled(bool value);

    Q_PROPERTY(uint RepeatInterval READ repeatInterval WRITE setRepeatInterval NOTIFY RepeatIntervalChanged)
    uint repeatInterval();
    void setRepeatInterval(uint value);

    Q_PROPERTY(QStringList UserLayoutList READ userLayoutList NOTIFY UserLayoutListChanged)
    QStringList userLayoutList();

    Q_PROPERTY(QStringList UserOptionList READ userOptionList NOTIFY UserOptionListChanged)
    QStringList userOptionList();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AddLayoutOption(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("AddLayoutOption"), argumentList);
    }

    inline void AddLayoutOptionQueued(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);

        CallQueued(QStringLiteral("AddLayoutOption"), argumentList);
    }


    inline QDBusPendingReply<> AddUserLayout(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("AddUserLayout"), argumentList);
    }

    inline void AddUserLayoutQueued(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);

        CallQueued(QStringLiteral("AddUserLayout"), argumentList);
    }


    inline QDBusPendingReply<> ClearLayoutOption()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ClearLayoutOption"), argumentList);
    }

    inline void ClearLayoutOptionQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("ClearLayoutOption"), argumentList);
    }


    inline QDBusPendingReply<> DeleteLayoutOption(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("DeleteLayoutOption"), argumentList);
    }

    inline void DeleteLayoutOptionQueued(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);

        CallQueued(QStringLiteral("DeleteLayoutOption"), argumentList);
    }


    inline QDBusPendingReply<> DeleteUserLayout(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("DeleteUserLayout"), argumentList);
    }

    inline void DeleteUserLayoutQueued(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);

        CallQueued(QStringLiteral("DeleteUserLayout"), argumentList);
    }


    inline QDBusPendingReply<QString> GetLayoutDesc(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("GetLayoutDesc"), argumentList);
    }



    inline QDBusPendingReply<KeyboardLayoutList> LayoutList()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("LayoutList"), argumentList);
    }



    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline void ResetQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Reset"), argumentList);
    }



Q_SIGNALS: // SIGNALS
    // begin property changed signals
    void CapslockToggleChanged(bool  value) const;
    void CurrentLayoutChanged(const QString & value) const;
    void CursorBlinkChanged(int  value) const;
    void LayoutScopeChanged(int  value) const;
    void RepeatDelayChanged(uint  value) const;
    void RepeatEnabledChanged(bool  value) const;
    void RepeatIntervalChanged(uint  value) const;
    void UserLayoutListChanged(const QStringList & value) const;
    void UserOptionListChanged(const QStringList & value) const;

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);
    void onPropertyChanged(const QString &propName, const QVariant &value);

private:
    __org_deepin_dde_InputDevice1_KeyboardPrivate *d_ptr;
};

namespace org {
  namespace deepin {
    namespace dde {
      namespace inputdevice1 {
        typedef ::__org_deepin_dde_InputDevice1_Keyboard Keyboard;
      }
    }
  }
}
#endif
