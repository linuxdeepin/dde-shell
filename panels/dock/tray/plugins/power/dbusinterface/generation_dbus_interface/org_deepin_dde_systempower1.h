/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c org_deepin_dde_SystemPower1 -p /home/uos/private/github_projects/dde-shell/panels/dock/tray/plugins/power/dbusinterface/generation_dbus_interface/org_deepin_dde_systempower1 /home/uos/private/github_projects/dde-shell/panels/dock/tray/plugins/power/dbusinterface/xml/org.deepin.dde.SystemPower1.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_DEEPIN_DDE_SYSTEMPOWER1_H
#define ORG_DEEPIN_DDE_SYSTEMPOWER1_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DDBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface org.deepin.dde.Power1
 */
class __org_deepin_dde_SystemPower1Private;
class __org_deepin_dde_SystemPower1 : public DTK_CORE_NAMESPACE::DDBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.dde.Power1"; }

public:
    explicit __org_deepin_dde_SystemPower1(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__org_deepin_dde_SystemPower1();

    Q_PROPERTY(double BatteryPercentage READ batteryPercentage NOTIFY BatteryPercentageChanged)
    double batteryPercentage();

    Q_PROPERTY(uint BatteryStatus READ batteryStatus NOTIFY BatteryStatusChanged)
    uint batteryStatus();

    Q_PROPERTY(qulonglong BatteryTimeToEmpty READ batteryTimeToEmpty NOTIFY BatteryTimeToEmptyChanged)
    qulonglong batteryTimeToEmpty();

    Q_PROPERTY(qulonglong BatteryTimeToFull READ batteryTimeToFull NOTIFY BatteryTimeToFullChanged)
    qulonglong batteryTimeToFull();

    Q_PROPERTY(bool HasBattery READ hasBattery NOTIFY HasBatteryChanged)
    bool hasBattery();

    Q_PROPERTY(bool HasLidSwitch READ hasLidSwitch NOTIFY HasLidSwitchChanged)
    bool hasLidSwitch();

    Q_PROPERTY(bool IsHighPerformanceSupported READ isHighPerformanceSupported NOTIFY IsHighPerformanceSupportedChanged)
    bool isHighPerformanceSupported();

    Q_PROPERTY(QString Mode READ mode NOTIFY ModeChanged)
    QString mode();

    Q_PROPERTY(bool OnBattery READ onBattery NOTIFY OnBatteryChanged)
    bool onBattery();

    Q_PROPERTY(bool PowerSavingModeAuto READ powerSavingModeAuto WRITE setPowerSavingModeAuto NOTIFY PowerSavingModeAutoChanged)
    bool powerSavingModeAuto();
    void setPowerSavingModeAuto(bool value);

    Q_PROPERTY(bool PowerSavingModeAutoWhenBatteryLow READ powerSavingModeAutoWhenBatteryLow WRITE setPowerSavingModeAutoWhenBatteryLow NOTIFY PowerSavingModeAutoWhenBatteryLowChanged)
    bool powerSavingModeAutoWhenBatteryLow();
    void setPowerSavingModeAutoWhenBatteryLow(bool value);

    Q_PROPERTY(uint PowerSavingModeBrightnessDropPercent READ powerSavingModeBrightnessDropPercent WRITE setPowerSavingModeBrightnessDropPercent NOTIFY PowerSavingModeBrightnessDropPercentChanged)
    uint powerSavingModeBrightnessDropPercent();
    void setPowerSavingModeBrightnessDropPercent(uint value);

    Q_PROPERTY(bool PowerSavingModeEnabled READ powerSavingModeEnabled WRITE setPowerSavingModeEnabled NOTIFY PowerSavingModeEnabledChanged)
    bool powerSavingModeEnabled();
    void setPowerSavingModeEnabled(bool value);

    Q_PROPERTY(bool PowerSystemAutoToSleepWhenFree READ powerSystemAutoToSleepWhenFree WRITE setPowerSystemAutoToSleepWhenFree NOTIFY PowerSystemAutoToSleepWhenFreeChanged)
    bool powerSystemAutoToSleepWhenFree();
    void setPowerSystemAutoToSleepWhenFree(bool value);

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QList<QDBusObjectPath> > GetBatteries()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetBatteries"), argumentList);
    }



    inline QDBusPendingReply<> Refresh()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Refresh"), argumentList);
    }

    inline void RefreshQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Refresh"), argumentList);
    }


    inline QDBusPendingReply<> RefreshBatteries()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RefreshBatteries"), argumentList);
    }

    inline void RefreshBatteriesQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("RefreshBatteries"), argumentList);
    }


    inline QDBusPendingReply<> RefreshMains()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RefreshMains"), argumentList);
    }

    inline void RefreshMainsQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("RefreshMains"), argumentList);
    }


    inline QDBusPendingReply<> SetMode(const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QStringLiteral("SetMode"), argumentList);
    }

    inline void SetModeQueued(const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mode);

        CallQueued(QStringLiteral("SetMode"), argumentList);
    }



Q_SIGNALS: // SIGNALS
    void BatteryAdded(const QDBusObjectPath &objpath);
    void BatteryDisplayUpdate(qlonglong timestamp);
    void BatteryRemoved(const QDBusObjectPath &objpath);
    void LidClosed();
    void LidOpened();
    // begin property changed signals
    void BatteryPercentageChanged(double  value) const;
    void BatteryStatusChanged(uint  value) const;
    void BatteryTimeToEmptyChanged(qulonglong  value) const;
    void BatteryTimeToFullChanged(qulonglong  value) const;
    void HasBatteryChanged(bool  value) const;
    void HasLidSwitchChanged(bool  value) const;
    void IsHighPerformanceSupportedChanged(bool  value) const;
    void ModeChanged(const QString & value) const;
    void OnBatteryChanged(bool  value) const;
    void PowerSavingModeAutoChanged(bool  value) const;
    void PowerSavingModeAutoWhenBatteryLowChanged(bool  value) const;
    void PowerSavingModeBrightnessDropPercentChanged(uint  value) const;
    void PowerSavingModeEnabledChanged(bool  value) const;
    void PowerSystemAutoToSleepWhenFreeChanged(bool  value) const;

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);
    void onPropertyChanged(const QString &propName, const QVariant &value);

private:
    __org_deepin_dde_SystemPower1Private *d_ptr;
};

namespace org {
  namespace deepin {
    namespace dde {
      typedef ::__org_deepin_dde_SystemPower1 Power1;
    }
  }
}
#endif
